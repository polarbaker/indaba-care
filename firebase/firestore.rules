rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the authenticated user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate string fields
    function isValidString(value) {
      return value is string && value.size() > 0;
    }
    
    // Helper function to validate timestamps
    function isValidTimestamp(value) {
      return value is number && value > 0;
    }
    
    // Family document rules
    match /families/{familyId} {
      allow read: if isOwner(familyId);
      allow create: if isAuthenticated() && 
                     request.resource.data.id == request.auth.uid &&
                     isValidString(request.resource.data.name) &&
                     isValidString(request.resource.data.email);
      allow update: if isOwner(familyId) && 
                     request.resource.data.id == resource.data.id;
      allow delete: if isOwner(familyId);
      
      // Children sub-collection rules
      match /children/{childId} {
        allow read: if isOwner(get(/databases/$(database)/documents/families/$(familyId)).data.id);
        allow write: if isOwner(get(/databases/$(database)/documents/families/$(familyId)).data.id);
      }
    }
    
    // Child document rules
    match /children/{childId} {
      allow read: if isAuthenticated() && 
                   exists(/databases/$(database)/documents/families/$(request.auth.uid)/children/$(childId));
      allow create: if isAuthenticated() && 
                     request.resource.data.familyId == request.auth.uid &&
                     isValidString(request.resource.data.name) &&
                     isValidString(request.resource.data.dateOfBirth);
      allow update: if isAuthenticated() && 
                     resource.data.familyId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                     resource.data.familyId == request.auth.uid;
    }
    
    // Session document rules
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && 
                   (resource.data.familyId == request.auth.uid || 
                    resource.data.nannyId == request.auth.uid);
      allow create: if isAuthenticated() && 
                     (request.resource.data.familyId == request.auth.uid || 
                      request.resource.data.nannyId == request.auth.uid) &&
                     isValidTimestamp(request.resource.data.startTime);
      allow update: if isAuthenticated() && 
                     (resource.data.familyId == request.auth.uid || 
                      resource.data.nannyId == request.auth.uid);
      allow delete: if isAuthenticated() && 
                     resource.data.familyId == request.auth.uid;
    }
    
    // Photo document rules
    match /photos/{photoId} {
      allow read: if isAuthenticated() && 
                   resource.data.childId in get(/databases/$(database)/documents/families/$(request.auth.uid)).data.children;
      allow create: if isAuthenticated() && 
                     request.resource.data.childId in get(/databases/$(database)/documents/families/$(request.auth.uid)).data.children;
      allow update: if isAuthenticated() && 
                     resource.data.childId in get(/databases/$(database)/documents/families/$(request.auth.uid)).data.children;
      allow delete: if isAuthenticated() && 
                     resource.data.childId in get(/databases/$(database)/documents/families/$(request.auth.uid)).data.children;
    }
    
    // Feedback document rules
    match /feedback/{feedbackId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                     request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Resource document rules - read-only for authenticated users
    match /resources/{resourceId} {
      allow read: if isAuthenticated();
      allow write: if false; // Resources are managed by admins only
    }
  }
}
